import { Injectable } from '@angular/core';
import { Jalon } from '@models/Jalon.model';
import { Session } from '@models/Session.model';
import { Repository } from '@models/Repository.model';
import { JsonManagerService } from '@services/json-manager.service';

/**
 * This service is used to store data
 */
@Injectable({
  providedIn: 'root'
})
export class DataService {
  /**
   * The document title
   */
  title: string;

  /**
   * The correction milestones
   */
  corrections: Jalon[];

  /**
   * The practical sessions
   */
  sessions: Session[];

  /**
   * The review milestones
   */
  reviews: Jalon[];

  /**
   * The others milestones. These milestones have no impact on the stats generated by the application, they are just graphical elements
   */
  others: Jalon[];

  /**
   * The repositories
   */
  repositories: Repository[];

  /**
   * A date before which commits are not retrieved from Github
   */
  startDate: string;

  /**
   * A date after which commits are not retrieved from Github
   */
  endDate: string;

  /**
   * The course associated with the configuration file
   */
  course: string;

  /**
   * The program associated with the configuration file
   */
  program: string;

  /**
   * The year associated with the configuration file
   */
  year: string;

  /**
   * The TP groups of the class
   */
  tpGroups: string[];

  /**
   * The date on which the data was last recovered from Github
   */
  lastUpdateDate: Date;

  /**
   * The questions that will be handled by the application
   */
  questions: string[];

  /**
   * The index of the threshold bar of the graph "questions-completion"
   */
  barIndex = 5;

  /**
   * A boolean used to tell if data is fully loaded
   */
  dataLoaded = false;

  /**
   * DataService constructor
   * @param jsonManager
   */
  constructor(private jsonManager: JsonManagerService) {}

  /**
   * Generates the json of the initial configuration file, updated with modified values during the use of the application
   */
  generateJSON() {
    this.jsonManager.generateJson(
      this.title,
      this.questions,
      this.repositories,
      this.sessions,
      this.corrections,
      this.reviews,
      this.others,
      this.startDate,
      this.endDate,
      this.course,
      this.program,
      this.year
    );
  }
}
